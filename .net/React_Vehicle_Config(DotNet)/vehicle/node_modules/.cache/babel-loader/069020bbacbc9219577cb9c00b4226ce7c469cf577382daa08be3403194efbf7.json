{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhush\\\\OneDrive\\\\Desktop\\\\doc\\\\vehicle_React_Tejas\\\\vehicle\\\\src\\\\Components\\\\About.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AboutPage = () => {\n  _s();\n  // States to store the data fetched from the backend\n  const [aboutUs, setAboutUs] = useState('');\n  const [whoWeAre, setWhoWeAre] = useState('');\n  const [whoContent, setWhoContent] = useState('');\n  const [techStack, setTechStack] = useState('');\n  const [techContent, setTechContent] = useState('');\n  const [error, setError] = useState(null); // For handling errors\n\n  // Helper function to fetch data from the backend\n  const fetchData = async (url, setter) => {\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept-Language': 'en-US',\n          'Cache-Control': 'no-cache' // Disable caching\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      const data = await response.text(); // Assuming the data is plain text\n      setter(data);\n    } catch (err) {\n      setError(err.message); // Set error state if request fails\n    }\n  };\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchData('http://localhost:8080/aboutus', setAboutUs);\n    fetchData('http://localhost:8080/who', setWhoWeAre);\n    fetchData('http://localhost:8080/whocontent', setWhoContent);\n    fetchData('http://localhost:8080/techstack', setTechStack);\n    fetchData('http://localhost:8080/techcontent', setTechContent);\n  }, []); // Empty dependency array ensures this runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: `Error: ${error}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: aboutUs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: whoWeAre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: whoContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: techStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: techContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(AboutPage, \"1iGVVCX5hFrXglQdIF+JYsdT/Hw=\");\n_c = AboutPage;\nexport default AboutPage;\nvar _c;\n$RefreshReg$(_c, \"AboutPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AboutPage","_s","aboutUs","setAboutUs","whoWeAre","setWhoWeAre","whoContent","setWhoContent","techStack","setTechStack","techContent","setTechContent","error","setError","fetchData","url","setter","response","fetch","method","headers","ok","Error","data","text","err","message","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bhush/OneDrive/Desktop/doc/vehicle_React_Tejas/vehicle/src/Components/About.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst AboutPage = () => {\r\n  // States to store the data fetched from the backend\r\n  const [aboutUs, setAboutUs] = useState('');\r\n  const [whoWeAre, setWhoWeAre] = useState('');\r\n  const [whoContent, setWhoContent] = useState('');\r\n  const [techStack, setTechStack] = useState('');\r\n  const [techContent, setTechContent] = useState('');\r\n  const [error, setError] = useState(null); // For handling errors\r\n\r\n  // Helper function to fetch data from the backend\r\n  const fetchData = async (url, setter) => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept-Language': 'en-US',\r\n          'Cache-Control': 'no-cache', // Disable caching\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n\r\n      const data = await response.text(); // Assuming the data is plain text\r\n      setter(data);\r\n    } catch (err) {\r\n      setError(err.message); // Set error state if request fails\r\n    }\r\n  };\r\n\r\n  // Fetch data on component mount\r\n  useEffect(() => {\r\n    fetchData('http://localhost:8080/aboutus', setAboutUs);\r\n    fetchData('http://localhost:8080/who', setWhoWeAre);\r\n    fetchData('http://localhost:8080/whocontent', setWhoContent);\r\n    fetchData('http://localhost:8080/techstack', setTechStack);\r\n    fetchData('http://localhost:8080/techcontent', setTechContent);\r\n  }, []); // Empty dependency array ensures this runs once when the component mounts\r\n\r\n  return (\r\n    <div>\r\n      \r\n\r\n      {error && <div style={{ color: 'red' }}>{`Error: ${error}`}</div>} {/* Show error if any */}\r\n\r\n      <h2>{aboutUs}</h2>\r\n      <h3>{whoWeAre}</h3>\r\n      <p>{whoContent}</p>\r\n\r\n      <h3>{techStack}</h3>\r\n      <p>{techContent}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}