{"ast":null,"code":"const API_BASE_URL = \"https://localhost:7185\"; // Change this URL to your actual backend URL\n\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      // Corrected string interpolation syntax\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // Indicating JSON body content\n      },\n      body: JSON.stringify({\n        email,\n        password\n      }) // Send the email and password in the request body\n    });\n\n    // Check if the response is not ok (status code not in the range 200-299)\n    if (!response.ok) {\n      const errorText = await response.text(); // Get error message from response\n      throw new Error(`Login failed: ${errorText || response.statusText}`); // Handle response error message\n    }\n\n    // Assuming the response is a JSON object\n    const data = await response.json();\n\n    // If there's a valid response with companyInfo and token, return the data\n    if (data && data.companyInfo && data.token) {\n      return data; // Return the entire response object containing companyInfo and token\n    } else {\n      throw new Error('Invalid credentials or empty response from server.');\n    }\n  } catch (error) {\n    console.error(\"Error during login:\", error); // Log error to the console\n    throw new Error(error.message || 'Login failed. Please try again.'); // Return custom error message\n  }\n};","map":{"version":3,"names":["API_BASE_URL","loginUser","email","password","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","statusText","data","json","companyInfo","token","error","console","message"],"sources":["E:/final project/.net/React_Vehicle_Config(DotNet)/vehicle/src/services/api.js"],"sourcesContent":["const API_BASE_URL = \"https://localhost:7185\";  // Change this URL to your actual backend URL\r\n\r\nexport const loginUser = async (email, password) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/api/auth/login`, {  // Corrected string interpolation syntax\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',  // Indicating JSON body content\r\n            },\r\n            body: JSON.stringify({ email, password }),  // Send the email and password in the request body\r\n        });\r\n\r\n        // Check if the response is not ok (status code not in the range 200-299)\r\n        if (!response.ok) {\r\n            const errorText = await response.text();  // Get error message from response\r\n            throw new Error(`Login failed: ${errorText || response.statusText}`);  // Handle response error message\r\n        }\r\n\r\n        // Assuming the response is a JSON object\r\n        const data = await response.json();\r\n\r\n        // If there's a valid response with companyInfo and token, return the data\r\n        if (data && data.companyInfo && data.token) {\r\n            return data;  // Return the entire response object containing companyInfo and token\r\n        } else {\r\n            throw new Error('Invalid credentials or empty response from server.');\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error during login:\", error);  // Log error to the console\r\n        throw new Error(error.message || 'Login failed. Please try again.');  // Return custom error message\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,wBAAwB,CAAC,CAAE;;AAEhD,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB,EAAE;MAAG;MAC9DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB,CAAG;MACzC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC,CAAC,CAAG;IAChD,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,iBAAiBF,SAAS,IAAIR,QAAQ,CAACW,UAAU,EAAE,CAAC,CAAC,CAAE;IAC3E;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;;IAElC;IACA,IAAID,IAAI,IAAIA,IAAI,CAACE,WAAW,IAAIF,IAAI,CAACG,KAAK,EAAE;MACxC,OAAOH,IAAI,CAAC,CAAE;IAClB,CAAC,MAAM;MACH,MAAM,IAAIF,KAAK,CAAC,oDAAoD,CAAC;IACzE;EACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC,CAAE;IAC9C,MAAM,IAAIN,KAAK,CAACM,KAAK,CAACE,OAAO,IAAI,iCAAiC,CAAC,CAAC,CAAE;EAC1E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}