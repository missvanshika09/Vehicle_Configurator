{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8083\"; // Change this URL to your actual backend URL\n\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // Indicating JSON body content\n      },\n      body: JSON.stringify({\n        email,\n        password\n      }) // Send the email and password in the request body\n    });\n    if (!response.ok) {\n      const errorText = await response.text(); // Get error message from response\n      throw new Error(`Login failed: ${errorText}`); // Throw error if not ok\n    }\n    const token = await response.text(); // Get the token as plain text\n    if (token) {\n      return {\n        token\n      }; // Return the token in an object\n    } else {\n      throw new Error('Invalid credentials'); // Throw error if no token is returned\n    }\n  } catch (error) {\n    console.error(\"Error during login:\", error);\n    return null; // Return null if error occurs\n  }\n};","map":{"version":3,"names":["API_BASE_URL","loginUser","email","password","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","token","error","console"],"sources":["C:/Users/bhush/OneDrive/Desktop/doc/vehicle_React_Tejas/vehicle/src/services/api.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8083\";  // Change this URL to your actual backend URL\r\n\r\nexport const loginUser = async (email, password) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',  // Indicating JSON body content\r\n            },\r\n            body: JSON.stringify({ email, password }),  // Send the email and password in the request body\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();  // Get error message from response\r\n            throw new Error(`Login failed: ${errorText}`);  // Throw error if not ok\r\n        }\r\n\r\n        const token = await response.text();  // Get the token as plain text\r\n        if (token) {\r\n            return { token };  // Return the token in an object\r\n        } else {\r\n            throw new Error('Invalid credentials');  // Throw error if no token is returned\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error during login:\", error);\r\n        return null;  // Return null if error occurs\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB,CAAC,CAAE;;AAE/C,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB,EAAE;MAC3DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB,CAAG;MACzC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC,CAAC,CAAG;IAChD,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,iBAAiBF,SAAS,EAAE,CAAC,CAAC,CAAE;IACpD;IAEA,MAAMG,KAAK,GAAG,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAE;IACtC,IAAIE,KAAK,EAAE;MACP,OAAO;QAAEA;MAAM,CAAC,CAAC,CAAE;IACvB,CAAC,MAAM;MACH,MAAM,IAAID,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAE;IAC7C;EACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO,IAAI,CAAC,CAAE;EAClB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}