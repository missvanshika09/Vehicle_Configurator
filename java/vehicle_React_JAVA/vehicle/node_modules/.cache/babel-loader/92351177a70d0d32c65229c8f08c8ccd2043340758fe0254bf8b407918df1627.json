{"ast":null,"code":"const API_BASE_URL = \"http://localhost:8083\"; // Replace with your backend API URL\n\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\" // Set content type to JSON\n      },\n      body: JSON.stringify({\n        email,\n        password\n      }) // Send email and password in the request body\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Login failed: ${errorText || response.statusText}`);\n    }\n\n    // Assuming the response is a JSON object containing companyInfo and token\n    const data = await response.json();\n    if (data && data.token && data.companyInfo) {\n      return data;\n    } else {\n      throw new Error(\"Invalid credentials or empty response from server.\");\n    }\n  } catch (error) {\n    console.error(\"Error during login:\", error);\n    throw new Error(error.message || \"Login failed. Please try again.\");\n  }\n};","map":{"version":3,"names":["API_BASE_URL","loginUser","email","password","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","statusText","data","json","token","companyInfo","error","console","message"],"sources":["C:/Users/bhush/OneDrive/Desktop/doc/vehicle_React_Tejas/vehicle/src/services/api.js"],"sourcesContent":["const API_BASE_URL = \"http://localhost:8083\";  // Replace with your backend API URL\r\n\r\nexport const loginUser = async (email, password) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",  // Set content type to JSON\r\n            },\r\n            body: JSON.stringify({ email, password }),  // Send email and password in the request body\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Login failed: ${errorText || response.statusText}`);\r\n        }\r\n\r\n        // Assuming the response is a JSON object containing companyInfo and token\r\n        const data = await response.json();\r\n\r\n        if (data && data.token && data.companyInfo) {\r\n            return data;\r\n        } else {\r\n            throw new Error(\"Invalid credentials or empty response from server.\");\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error during login:\", error);\r\n        throw new Error(error.message || \"Login failed. Please try again.\");\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB,CAAC,CAAE;;AAE/C,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,YAAY,iBAAiB,EAAE;MAC3DM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB,CAAG;MACzC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC,CAAC,CAAG;IAChD,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,iBAAiBF,SAAS,IAAIR,QAAQ,CAACW,UAAU,EAAE,CAAC;IACxE;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACG,WAAW,EAAE;MACxC,OAAOH,IAAI;IACf,CAAC,MAAM;MACH,MAAM,IAAIF,KAAK,CAAC,oDAAoD,CAAC;IACzE;EACJ,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAM,IAAIN,KAAK,CAACM,KAAK,CAACE,OAAO,IAAI,iCAAiC,CAAC;EACvE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}